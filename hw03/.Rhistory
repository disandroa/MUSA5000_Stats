bw
gwrmodel<-gwr(formula=LNMEDHVAL ~ LNNBELPOV100 + PCTBACHMOR +
PCTVACANT + PCTSINGLES,
data=shps,
adapt = bw, #adaptive bandwidth determined by proportion of observations accounted for
gweight=gwr.Gauss,
se.fit=TRUE, #to return local standard errors
hatmatrix = TRUE)
gwrmodel
summary(gwrmodel$SDF)
gwrresults<-as.data.frame(gwrmodel$SDF)
shps$gwrE<-gwrresults$gwr.e
regdata$GWR_RESIDU = shps$gwrE/sd(shps$gwrE)
resgwr<-regdata$GWR_RESIDU
GwrMoranMc<-moran.mc(resgwr, queenlist,999, alternative="two.sided")
result <- paste("The Global Moran's I value for the residuals for the spatial gwr model is about ", round(GwrMoranMc$statistic,2),", with a p-value of about ", round(GwrMoranMc$p.value,3),".")
print(result)
GwrMoranMCres<-GwrMoranMc$res
moran_data_gwr <- data.frame(Moran_I = GwrMoranMCres)
ggplot(moran_data_gwr, aes(x = Moran_I)) +
geom_histogram(bins = 100, fill = "lightblue", color = "black", aes(y = ..count..)) +
geom_vline(aes(xintercept = moran(regdata$GWR_RESIDU, queenlist,
n = length(queenlist$neighbours),
S0 = Szero(queenlist))$`I`),
color = "red", linetype = "dashed", size = 1) +
labs(title = "Distribution of Moran's I of Spatially Lagged GWR Model Residuals",
x = "Moran's I Values",
y = "Frequency") +
theme_minimal()
moran_plot_ggplot <- function(standardised, listw) {
# Calculate Moran's I
moran_result <- moran.test(standardised, listw)
# Extract residuals and calculate spatial lag
moran_residuals <- residuals(lm(standardised ~ 1))  # Assuming the mean is being plotted
spatial_lag <- lag.listw(listw, moran_residuals)
# Create a data frame for ggplot
df <- data.frame(residuals = moran_residuals, spatial_lag = spatial_lag)
# Create ggplot
gg <- ggplot(df, aes(x = spatial_lag, y = residuals)) +
geom_point(alpha = 0.6) +  # Scatter plot
geom_smooth(method = "lm", color = "red") +  # Linear fit
labs(title = "Moran's I Plot of Geographically Weighted Regression Model",
x = "Residuals",
y = "Lagged Residuals") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the title
print(gg)  # Print the ggplot object
}
# Call the function
moran_plot_ggplot(listw =queenlist, standardised = regdata$GWR_RESIDU)
#LNNBELPOV100 + PCTBACHMOR + PCTVACANT + PCTSINGLES
shps$coefLNNBELPOV100st<-gwrresults$LNNBELPOV100/gwrresults$LNNBELPOV100_se
shps$coefPCTBACHMORst<-gwrresults$PCTBACHMOR/gwrresults$PCTBACHMOR_se
shps$coefPCTVACANTst<-gwrresults$PCTVACANT/gwrresults$PCTVACANT_se
shps$coefPCTSINGLESst<-gwrresults$PCTSINGLES/gwrresults$PCTSINGLES_se
coefLNNBELPOV100<-tm_shape(shps)+
tm_fill(col='coefLNNBELPOV100st', breaks=c(-Inf, -2, 0, 2, Inf), title='Standardized coefficient of LNNBELPOV100',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Households in Poverty (Log)',inner.margins = 0.2)
coefPCTBACHMOR<-tm_shape(shps)+
tm_fill(col='coefPCTBACHMORst', breaks=c(-Inf, -2, 0, 2, Inf), title='Standardized coefficient of PCTBACHMOR',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of People with Bachelors Degrees',inner.margins = 0.2)
coefPCTVACANT<-tm_shape(shps)+
tm_fill(col='coefPCTVACANTst', breaks=c(-Inf, -2, 0, 2, Inf), title='Standardized coefficient of PCTVACANT',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant',inner.margins = 0.2)
coefPCTSINGLES<-tm_shape(shps)+
tm_fill(col='coefPCTSINGLESst', breaks=c(-Inf, -2, 0, 2, Inf), title='Standardized coefficient of PCTSINGLES',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percent Single Family Households',inner.margins = 0.2)
tmap_arrange(coefLNNBELPOV100, coefPCTBACHMOR,coefPCTVACANT, coefPCTSINGLES, ncol=2)
gwrresults<-as.data.frame(gwrmodel$SDF)
shps$gwrE<-gwrresults$gwr.e
shps$localR2<-gwrresults$localR2
tm_shape(shps)+
tm_fill(col='localR2', breaks=c(0, 0.27,0.4,0.53,0.67, Inf), title='Local R Squared of Globally Weighted Regression',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'GWR Model R Squared Values')
getwd()
setwd("C:/Users/sofia/Documents/Github/MUSA5000_Stats/hw03")
```
setwd("C:/Users/sofia/Documents/Github/MUSA5000_Stats/hw03")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/sofia/Documents/Github/MUSA5000_Stats/hw03")
library(aod)
library(ggplot2)
library(rms)
library(gmodels)
library(nnet)
library(DAAG)
library(ROCR)
library(xtable)
library(dplyr)
library(tidycensus)
library(kableExtra)
df <- read.csv("data/Logistic Regression Data.csv")
head(df)
?read.csv
names(df)
df <- read.csv("data/Logistic Regression Data.csv",header=TRUE)
names(df)
DRINKING_D.tab <- table(df$DRINKING_D)
prop.table(DRINKING_D.tab)
table(df$DRINKING_D)
CrossTable(df$DRINKING_D, df$FATAL_OR_M)
ct <- CrossTable(df$DRINKING_D, df$FATAL_OR_M)
ct$prop.col
ct$prop.row
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:\\Users\\eugeneby\\Dropbox\\Documents\\Work and School\\Teaching\\CPLN 671 - Statistics and Data Mining\\Data\\Lecture 16 - R")
options(scipen=999)
#install.packages("aod")
#install.packages("ggplot2")
#install.packages("rms")
#install.packages("gmodels")
#install.packages("nnet")
#install.packages("DAAG")
#install.packages("ROCR")
#install.packages("xtable")
library(aod)
library(ggplot2)
library(rms)
library(gmodels)
library(nnet)
library(DAAG)
library(ROCR)
library(xtable)
mydata <- read.csv("Logistic Regression Example.csv")
ct_fatal <- CrossTable(df$DRINKING_D, df$FATAL_OR_M, )
ct_overturned <- CrossTable(df$DRINKING_D, df$OVERTURNED)
ct_cell <- CrossTable(df$DRINKING_D, df$CELL_PHONE)
ct_speed <- CrossTable(df$DRINKING_D, df$SPEEDING)
ct_aggressive <- CrossTable(df$DRINKING_D, df$AGRESSIVE)
ct_aggressive <- CrossTable(df$DRINKING_D,df$AGGRESSIVE)
ct_1617 <- CrossTable(df$DRINKING_D,df$DRIVER1617)
ct_65 <- CrossTable(df$DRINKING_D,df$DRIVER65PLUS)
ct_speed <- CrossTable(df$DRINKING_D, df$SPEEDING)
ct_fatal <- CrossTable(df$DRINKING_D, df$FATAL_OR_M, )
ct_overturned <- CrossTable(df$DRINKING_D, df$OVERTURNED)
ct_cell <- CrossTable(df$DRINKING_D, df$CELL_PHONE)
ct_speed <- CrossTable(df$DRINKING_D, df$SPEEDING)
ct_aggressive <- CrossTable(df$DRINKING_D,df$AGGRESSIVE)
ct_1617 <- CrossTable(df$DRINKING_D,df$DRIVER1617)
ct_65 <- CrossTable(df$DRINKING_D,df$DRIVER65PLUS)
ct_fatal <- CrossTable(df$DRINKING_D, df$FATAL_OR_M, )
ct_overturned <- CrossTable(df$DRINKING_D, df$OVERTURNED)
ct_cell <- CrossTable(df$DRINKING_D, df$CELL_PHONE)
ct_speed <- CrossTable(df$DRINKING_D, df$SPEEDING)
ct_aggressive <- CrossTable(df$DRINKING_D,df$AGGRESSIVE)
ct_1617 <- CrossTable(df$DRINKING_D,df$DRIVER1617)
ct_65 <- CrossTable(df$DRINKING_D,df$DRIVER65PLUS)
ct_1617$prop.col
ct_1617$prop.col$0
ct_fatal$t
ct_fatal$t[0]
ct_fatal$t[,1]
ct_fatal$t[1]
ct_fatal$t[2]
ct_fatal$t[,1]
ct_fatal$t[1,0]
ct_fatal$t[2,0]
ct_fatal$t[,2]
ct_fatal$t[,2][1]
ct_fatal$t[,2][1][1]
ct_fatal$t[,2][1]
ct_fatal$t[,2][1][0]
ct_fatal$t[,2][1][2]
ct_fatal$t[,2][1]
class(ct_fatal$t[,2][1])
ct_fatal$t[,2][1] + 1
ct_fatal$t[,2][2]
ct_total_drink <- c(ct_fatal$t[,2][2],ct_overturned$t[,2][2],ct_speed$t[,2][2],ct_aggressive$t[,2][2],ct_1617$t[,2][2],ct_65$t[,2][2])
ct_fatal$prop.col
ct_fatal$t[,2][2]
ct_fatal$t[,2][1]
ct_fatal$prop.row
ct_fatal$prop.row[,1]
ct_fatal$prop.row[,2]
ct_fatal$prop.row[,2][1]
round((ct_fatal$prop.row[,2][1])*100)
round((ct_fatal$prop.row[,2][1])*100,1)
round((ct_fatal$prop.row[,2][1])*100,2)
(round(ct_fatal$prop.row[,2][1],2)*100)
(round(ct_fatal$prop.row[,2][1],3)*100)
round(ct_fatal$prop.row[,2][1],3)
round(ct_fatal$prop.row[,2][2],3)
predictors <- c("FATAL_OR_M","OVERTURNED","CELL_PHONE","SPEEDING","AGGRESSIVE","DRIVER1617","DRIVER65PLUS")
thing <- c(ct_fatal,ct_overturned,ct_cell,ct_speed,ct_aggressive,ct_1617,ct_65)
ct_total_nodrink <- c(ct_fatal$t[,2][1],ct_overturned$t[,2][1],ct_speed$t[,2][1],ct_aggressive$t[,2][1],ct_1617$t[,2][1],ct_65$t[,2][1])
ct_total_drink <- c(ct_fatal$t[,2][2],ct_overturned$t[,2][2],ct_speed$t[,2][2],ct_aggressive$t[,2][2],ct_1617$t[,2][2],ct_65$t[,2][2])
ct_pct_nodrink <- c(round(ct_fatal$prop.row[,2][1],3),round(ct_overturned$prop.row[,2][1],3),round(ct_cell$prop.row[,2][1],3),round(ct_speed$prop.row[,2][1],3),round(ct_aggressive$prop.row[,2][1],3),round(ct_1617$prop.row[,2][1],3),round(ct_65$prop.row[,2][1],3))
ct_pct_drink <- c(round(ct_fatal$prop.row[,2][2],3),round(ct_overturned$prop.row[,2][2],3),round(ct_cell$prop.row[,2][2],3),round(ct_speed$prop.row[,2][2],3),round(ct_aggressive$prop.row[,2][2],3),round(ct_1617$prop.row[,2][2],3),round(ct_65$prop.row[,2][2],3))
table <- data.frame(predictors,ct_total_nodrink, ct_pct_nodrink, ct_total_drink, ct_pct_drink)
length(predictors)
length(ct_total_drink)
predictors <- c("FATAL_OR_M","OVERTURNED","CELL_PHONE","SPEEDING","AGGRESSIVE","DRIVER1617","DRIVER65PLUS")
thing <- c(ct_fatal,ct_overturned,ct_cell,ct_speed,ct_aggressive,ct_1617,ct_65)
ct_total_nodrink <- c(ct_fatal$t[,2][1],ct_overturned$t[,2][1],ct_cell$t[,2][1],ct_speed$t[,2][1],ct_aggressive$t[,2][1],ct_1617$t[,2][1],ct_65$t[,2][1])
ct_total_drink <- c(ct_fatal$t[,2][2],ct_overturned$t[,2][2],ct_cell$t[,2][2],ct_speed$t[,2][2],ct_aggressive$t[,2][2],ct_1617$t[,2][2],ct_65$t[,2][2])
ct_pct_nodrink <- c(round(ct_fatal$prop.row[,2][1],3),round(ct_overturned$prop.row[,2][1],3),round(ct_cell$prop.row[,2][1],3),round(ct_speed$prop.row[,2][1],3),round(ct_aggressive$prop.row[,2][1],3),round(ct_1617$prop.row[,2][1],3),round(ct_65$prop.row[,2][1],3))
ct_pct_drink <- c(round(ct_fatal$prop.row[,2][2],3),round(ct_overturned$prop.row[,2][2],3),round(ct_cell$prop.row[,2][2],3),round(ct_speed$prop.row[,2][2],3),round(ct_aggressive$prop.row[,2][2],3),round(ct_1617$prop.row[,2][2],3),round(ct_65$prop.row[,2][2],3))
table <- data.frame(predictors,ct_total_nodrink, ct_pct_nodrink, ct_total_drink, ct_pct_drink)
print(table)
ct_fatal
ct_chi_fatal <- CrossTable(df$DRINKING_D,df$FATAL_OR_M,prop.r=FALSE,prop.t=FALSE,prop.chisq=FALSE, chisq=TRUE)
ct_chi_overturned <- CrossTable(df$DRINKING_D,df$OVERTURNED,prop.r=FALSE,prop.t=FALSE,prop.chisq=FALSE, chisq=TRUE)
ct_chi_cell <- CrossTable(df$DRINKING_D,df$CELL_PHONE,prop.r=FALSE,prop.t=FALSE,prop.chisq=FALSE, chisq=TRUE)
ct_chi_speed <- CrossTable(df$DRINKING_D,df$SPEEDING,prop.r=FALSE,prop.t=FALSE,prop.chisq=FALSE, chisq=TRUE)
ct_chi_aggressive <- CrossTable(df$DRINKING_D,df$AGGRESSIVE,prop.r=FALSE,prop.t=FALSE,prop.chisq=FALSE, chisq=TRUE)
ct_chi_1617 <- CrossTable(df$DRINKING_D,df$DRIVER1617,prop.r=FALSE,prop.t=FALSE,prop.chisq=FALSE, chisq=TRUE)
ct_chi_65 <- CrossTable(df$DRINKING_D,df$DRIVER65PLUS,prop.r=FALSE,prop.t=FALSE,prop.chisq=FALSE, chisq=TRUE)
ct_chi_fatal
ct_chi_fatal$chisq
ct_chi_fatal$chisq[1]
ct_chi_fatal$chisq[2]
ct_chi_fatal$chisq[3]
ct_chi_fatal$chisq[3][1]
round(ct_chi_fatal$chisq[3],5)
class(ct_chi_fatal$chisq[3])
class(ct_chi_fatal$chisq[3][1])
ct_chi_fatal$chisq[,1]
ct_chi_fatal$chisq[3][,1]
ct_chi_fatal$chisq[3][2]
ct_chi_fatal$chisq[3]
ct_chi_fatal$chisq[3] %>% as.numeric()
class(as.numeric(ct_chi_fatal$chisq[3]))
round(as.numeric(ct_chi_fatal$chisq[3]),10)
round(as.numeric(ct_chi_1617$chisq[3]),10)
round(as.numeric(ct_chi_aggressive$chisq[3]),10)
ct_chi_nodrink <- c(round(as.numeric(ct_chi_fatal$chisq[3])),round(as.numeric(ct_chi_overturned$chisq[3]),10),round(as.numeric(ct_chi_cell$chisq[3]),10),round(as.numeric(ct_chi_speed$chisq[3]),10),round(as.numeric(ct_chi_aggressive$chisq[3]),10),round(as.numeric(ct_chi_1617$chisq[3]),10),round(as.numeric(ct_chi_1617$chisq[3]),10),round(as.numeric(ct_chi_65$chisq[3]),10))
ct_chi <- c(round(as.numeric(ct_chi_fatal$chisq[3])),round(as.numeric(ct_chi_overturned$chisq[3]),10),round(as.numeric(ct_chi_cell$chisq[3]),10),round(as.numeric(ct_chi_speed$chisq[3]),10),round(as.numeric(ct_chi_aggressive$chisq[3]),10),round(as.numeric(ct_chi_1617$chisq[3]),10),round(as.numeric(ct_chi_1617$chisq[3]),10),round(as.numeric(ct_chi_65$chisq[3]),10))
table %>% mutate(
X.squared_p = ct_chi
)
ct_chi <- c(round(as.numeric(ct_chi_fatal$chisq[3])),round(as.numeric(ct_chi_overturned$chisq[3]),10),round(as.numeric(ct_chi_cell$chisq[3]),10),round(as.numeric(ct_chi_speed$chisq[3]),10),round(as.numeric(ct_chi_aggressive$chisq[3]),10),round(as.numeric(ct_chi_1617$chisq[3]),10),round(as.numeric(ct_chi_65$chisq[3]),10))
table %>% mutate(
X.squared_p = ct_chi
)
print("I can still code")
head(df)
table(df$DRINKING_D)
tapply(df$PCTBACHMOR,df$DRINKING_D,mean)
pctbach_mean <- tapply(df$PCTBACHMOR,df$DRINKING_D,mean)
pctbach_sd <- tapply(df$PCTBACHMOR,df$DRINKING_D,sd)
pctbach_mean <- tapply(df$PCTBACHMOR,df$DRINKING_D,mean)
pctbach_sd <- tapply(df$PCTBACHMOR,df$DRINKING_D,sd)
medhh_mean <- tapply(df$MEDHHINC,df$DRINKING_D,mean)
medhh_sd <- tapply(df$MEDHHINC,df$DRINKING_D,sd)
pctbach_mean
pctbach_mean[1]
class(pctbach_mean[1])
table_continuous = data.frame(continuous_vars,mean_no_drinking,sd_no_drinking,mean_drinking,sd_drinking)
continuous_vars = c("PCTBACHMOR","MEDHHINC")
mean_no_drinking = c(round(pctbach_mean[1],2),round(medhh_mean[1],2))
mean_drinking = c(round(pctbach_mean[2],2),round(medhh_mean[2],2))
sd_no_drinking = c(round(pctbach_sd[1],2),round(medhh_sd[1],2))
sd_drinking =  c(round(pctbach_sd[2],2),round(medhh_sd[2],2))
table_continuous = data.frame(continuous_vars,mean_no_drinking,sd_no_drinking,mean_drinking,sd_drinking)
print(table_continuous)
t.test(df$PCTBACHMOR~df$DRINKING_D)
t.test(df$MEDHHINC~df$DRINKING_D)
t_pctbach <- t.test(df$PCTBACHMOR~df$DRINKING_D)
t_medhh <- t.test(df$MEDHHINC~df$DRINKING_D)
t_pctbach$p.value
t_pctbach
class(t_pctbach$p.value)
table_continuous %>% mutate(
ttest_pval = c(round(t_pctbach$p.value,3),round(t_medhh$p.value,3))
)
print(table_continuous)
table_continuous = table_continuous %>% mutate(
ttest_pval = c(round(t_pctbach$p.value,3),round(t_medhh$p.value,3))
)
print(table_continuous)
library(ggcorrplot)
names(df)
head(df$CRN)
head(df$AREAKEY)
table(df$COLLISION_)
predictors <- df %>% select(-c(CRN,DRINKING_D,AREAKEY))
ggcorrplot(
round(cor(predictors), 2),
p.mat = cor_pmat(predictors),
lab=T,
type="lower",
insig = "blank") +
labs(title = "Correlation Matrix of Predictor Variables", tl.cex = 0.5, tl.col = "black")
log_mod <- glm(DRINKING_D~FATAL_OR_M+OVERTURNED+CELL_PHONE+SPEEDING+AGGRESSIVE+DRIVER1617+DRIVER65PLUS+PCTBACHMOR+MEDHHINC,data=df,family="binomial")
summary(log_mod)
#Merging beta coefficients, odds ratios and 95% confidence intervals
cbind (log_mod$coefficients, exp(cbind(OR = coef(log_mod), confint(log_mod))))
log_mod$coefficients
log_mod$effects
head(log_mod$rank)
p(log_mod)
z(log_mod)
#Merging beta coefficients, odds ratios and 95% confidence intervals
cbind (log_mod$coefficients, exp(cbind(OR = coef(log_mod), confint(log_mod),summary(log_mod)[,4])))
#Merging beta coefficients, odds ratios and 95% confidence intervals
cbind (log_mod$coefficients,summary(log_mod)[,4], exp(cbind(OR = coef(log_mod), confint(log_mod))))
#Merging beta coefficients, odds ratios and 95% confidence intervals
cbind (log_mod$coefficients, exp(cbind(OR = coef(log_mod), confint(log_mod))))
summary(log_mod)[,4]
summary(log_mod)[1]
summary(log_mod)[2]
summary(log_mod)[3]
summary(log_mod)[4]
summary(log_mod)[5]
names(summary(log_mod))
summary(log_mod)[,1]
summary(log_mod)[10]
summary(log_mod)$call
summary(log_mod)$coefficients
summary(log_mod)$coefficients[1]
summary(log_mod)$coefficients[1,]
summary(log_mod)$coefficients[,1]
summary(log_mod)$coefficients[,1] == log_mod$coefficients
summary(log_mod)$coefficients[,4]
round(summary(log_mod)$coefficients[,4],10)
round(summary(log_mod)$coefficients[,4],5)
#Merging beta coefficients, odds ratios and 95% confidence intervals
cbind (log_mod$coefficients,p=round(summary(log_mod)$coefficients[,4],5) ,exp(cbind(OR = coef(log_mod), confint(log_mod))))
fit.binary = (fit>=0.5)
cutoffs = c(0.02,0.03,0.05,0.07,0.08,0.09,0.10,0.15,0.20,0.50)
fitted = log_mod$fitted
fit.binary = (fitted>=0.5)
CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
ct_binary = CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
ct_binary$t
ct_binary$t[,1][2]
class(ct_binary$t[,1][2])
ct_binary$t[,2][2]+ct_binary$t[,1][1]
ct_binary$t[,2][1]+ct_binary$t[,2][1]
ct_binary$t[,2][1]
ct_binary$t[,2]
ct_binary$t[,2][1]
false_neg = ct_binary$t[,2][1]
true_pos = ct_binary$t[,2][2]
false_pos = ct_binary$t[,1][1]
true_neg = ct_binary$t[,1][2]
sensitivity = true_pos/(true_pos+false_neg)
specificity = true_neg/(true_neg+false_pos)
table_ct = data.frame("0.5",sensitivity,specificity)
print(table)
print(table_ct)
sensitivity = c()
specificity = c()
sensitivity_list = c()
specificity_list = c()
table_ct = find_ss(0.5)
find_ss = function(cutoff) {
fit.binary = (fitted>=cutoff)
ct_binary = CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
false_neg = ct_binary$t[,2][1]
true_pos = ct_binary$t[,2][2]
false_pos = ct_binary$t[,1][1]
true_neg = ct_binary$t[,1][2]
sensitivity = true_pos/(true_pos+false_neg)
specificity = true_neg/(true_neg+false_pos)
sensitivity_list = c(sensitivity_list,sensitivity)
specificity_list = c(specificity_list,specificity)
table = data.frame(cutoff,sensitivity_list,specificity_list)
return(table)
}
table_ct = find_ss(0.5)
print(table_ct)
cutoff_list = c()
fitted = log_mod$fitted
cutoff_list = c()
find_ss = function(cutoff) {
fit.binary = (fitted>=cutoff)
ct_binary = CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
false_neg = ct_binary$t[,2][1]
true_pos = ct_binary$t[,2][2]
false_pos = ct_binary$t[,1][1]
true_neg = ct_binary$t[,1][2]
sensitivity = true_pos/(true_pos+false_neg)
specificity = true_neg/(true_neg+false_pos)
sensitivity_list = c(sensitivity_list,sensitivity)
specificity_list = c(specificity_list,specificity)
cutoff_list = c(cutoff_list,cutoff)
table = data.frame(cutoff_list,sensitivity_list,specificity_list)
return(table)
}
table_ct = find_ss(0.5)
print(table_ct)
length(cutoff_value)
cutoff_value = c(0.02,0.03,0.05,0.07,0.08,0.09,0.10,0.15,0.20,0.50)
length(cutoff_value)
cutoff_value[5]
rep_ss_function = function(cutoff_values){
for(i in length(cutoff_values)){
ith_cutoff = cutoff_values[i]
table = find_ss(ith_cutoff)
}
return(table)
}
table_test = rep_ss_function(cutoff_value)
print(table_test)
find_ss = function(cutoff_values) {
for(i in length(cutoff_values)){
cutoff = cutoff_values[i]
fit.binary = (fitted>=cutoff)
ct_binary = CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
false_neg = ct_binary$t[,2][1]
true_pos = ct_binary$t[,2][2]
false_pos = ct_binary$t[,1][1]
true_neg = ct_binary$t[,1][2]
sensitivity = true_pos/(true_pos+false_neg)
specificity = true_neg/(true_neg+false_pos)
sensitivity_list = c(sensitivity_list,sensitivity)
specificity_list = c(specificity_list,specificity)
cutoff_list = c(cutoff_list,cutoff)
}
table = data.frame(cutoff_list,sensitivity_list,specificity_list)
return(table)
}
cutoff_value = c(0.02,0.03,0.05,0.07,0.08,0.09,0.10,0.15,0.20,0.50)
table_test = find_ss(cutoff_value)
print(table_test)
for(i in length(c(1,1,1)){print("hi")})
for(i in length(c(1,1,1))){print("hi")}
for(i in seq_along(c(1,1,1))){print("hi")}
find_ss = function(cutoff_values) {
cutoff_list = c()
sensitivity_list = c()
specificity_list = c()
for(i in seq_along(cutoff_values)){
cutoff = cutoff_values[i]
fit.binary = (fitted>=cutoff)
ct_binary = CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
false_neg = ct_binary$t[,2][1]
true_pos = ct_binary$t[,2][2]
false_pos = ct_binary$t[,1][1]
true_neg = ct_binary$t[,1][2]
sensitivity = true_pos/(true_pos+false_neg)
specificity = true_neg/(true_neg+false_pos)
sensitivity_list = c(sensitivity_list,sensitivity)
specificity_list = c(specificity_list,specificity)
cutoff_list = c(cutoff_list,cutoff)
}
table = data.frame(cutoff_list,sensitivity_list,specificity_list)
return(table)
}
table_test = find_ss(cutoff_value)
print(table_test)
find_ss = function(cutoff_values) {
cutoff_list = c()
sensitivity_list = c()
specificity_list = c()
for(i in seq_along(cutoff_values)){
cutoff = cutoff_values[i]
fit.binary = (fitted>=cutoff)
ct_binary = CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
false_neg = ct_binary$t[,2][1]
true_pos = ct_binary$t[,2][2]
false_pos = ct_binary$t[,1][1]
true_neg = ct_binary$t[,1][2]
sensitivity = round(true_pos/(true_pos+false_neg),2)
specificity = round(true_neg/(true_neg+false_pos),2)
sensitivity_list = c(sensitivity_list,sensitivity)
specificity_list = c(specificity_list,specificity)
cutoff_list = c(cutoff_list,cutoff)
}
table = data.frame(cutoff_list,sensitivity_list,specificity_list)
return(table)
}
table_test = find_ss(cutoff_value)
print(table_test)
find_ss = function(cutoff_values) {
cutoff_list = c()
sensitivity_list = c()
specificity_list = c()
for(i in seq_along(cutoff_values)){
cutoff = cutoff_values[i]
fit.binary = (fitted>=cutoff)
ct_binary = CrossTable(fit.binary, df$DRINKING_D, prop.r=FALSE, prop.t=FALSE, prop.chisq=FALSE)
false_neg = ct_binary$t[,2][1]
true_pos = ct_binary$t[,2][2]
false_pos = ct_binary$t[,1][1]
true_neg = ct_binary$t[,1][2]
sensitivity = round(true_pos/(true_pos+false_neg),2)
specificity = round(true_neg/(true_neg+false_pos),2)
sensitivity_list = c(sensitivity_list,sensitivity)
specificity_list = c(specificity_list,specificity)
cutoff_list = c(cutoff_list,cutoff)
}
table = data.frame(cutoff_list,sensitivity=sensitivity_list,specificity=specificity_list)
return(table)
}
table_test = find_ss(cutoff_value)
table_test = find_ss(cutoff_value)
print(table_test)
length(fitted)
length(df$DRINKING_D)
a <- cbind(df$DRINKING_D, fitted)
colnames(a) <- c("labels","predictions")
roc <- as.data.frame(a)
pred <- prediction(roc$predictions, roc$labels)
roc.perf = performance(pred, measure = "tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
plot(roc.perf)
abline(a=0,b=1)
auc.perf = performance(pred, measure ="auc")
auc.perf@y.values
log_mod2 <- glm(DRINKING_D~FATAL_OR_M+OVERTURNED+CELL_PHONE+SPEEDING+AGGRESSIVE+DRIVER1617+DRIVER65PLUS,data=df,family="binomial")
summary(log_mod2)
cbind (log_mod2$coefficients,p=round(summary(log_mod2)$coefficients[,4],5) ,exp(cbind(OR = coef(log_mod2), confint(log_mod2))))
AIC(log_mod, log_mod2)
