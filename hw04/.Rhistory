setwd("~/Documents/GitHub/MUSA5000_Stats/hw04")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/GitHub/MUSA5000_Stats/hw04")
#install.packages(c("sp", "ISLR", "MASS", "spatstat", "spatial", "maptools", "ppp", "fossil", "adehabitatHR", "gdata", "raster", "rgdal", "spatialEco", "spatstat.explore", "spatstat.model", "proxy", "sf"))
library(graphics)
library(maptools)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/GitHub/MUSA5000_Stats/hw04")
#install.packages(c("sp", "ISLR", "MASS", "spatstat", "spatial", "maptools", "ppp", "fossil", "adehabitatHR", "gdata", "raster", "rgdal", "spatialEco", "spatstat.explore", "spatstat.model", "proxy", "sf"))
library(graphics)
library(spatstat)
library(sp)
library(sf)
library(fossil)
library(spatial)
library(adehabitatHR)
library(gdata)
library(raster)
library(spatialEco)
library(spatstat.model)
library(spatstat.explore)
library(proxy)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/GitHub/MUSA5000_Stats/hw04")
#install.packages(c("sp", "ISLR", "MASS", "spatstat", "spatial", "maptools", "ppp", "fossil", "adehabitatHR", "gdata", "raster", "rgdal", "spatialEco", "spatstat.explore", "spatstat.model", "proxy", "sf"))
library(graphics)
library(spatstat)
library(sp)
library(sf)
library(fossil)
library(spatial)
library(adehabitatHR)
library(gdata)
library(raster)
library(spatialEco)
library(spatstat.model)
library(spatstat.explore)
library(proxy)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
farmers_market <- st_read("data/Philadelphia_Farmers_Markets201302.shp", quiet = T)
philly_zips <- st_read("data/Philadelphia_ZipCodes.shp", quiet = T)
philly <- st_read("data/Philadelphia.shp", quiet = T)
View(philly_zips)
View(philly)
View(farmers_market)
View(farmers_market)
plot(philly)
View(philly)
farmers_market %>%
st_coordinates())
farmers_market %>%
st_coordinates()
library(tidyverse)
farmers_points <- data.frame(farmers_market %>%
st_coordinates()) %>%
distinct()
View(farmers_points)
farmers_points <- data.frame(farmers_market %>%
st_coordinates()) %>%
distinct()
philly_bound <- as.owin(philly)
# define ppp object
FM_ppp <- ppp(farmers_points$X, farmers_points$Y, window = philly_bound)
plot(density(FM_ppp))
contour(density(FM_ppp), add=TRUE)
plot(FM_ppp, add=T)
nnd <- nndist.ppp(FM_ppp)
#Average Observed Distance
MeanObsDist <- mean(nnd)
#Average Expected Distance
MeanExpDist <- 0.5 / sqrt(nrow(farmers_points) / area.owin(philly_bound))
#Standard Error
SE <- 0.26136 / sqrt(nrow(farmers_points)*nrow(farmers_points) / area.owin(philly_bound))
zscore <- (MeanObsDist - MeanExpDist)/SE                    #Calculating the z-score
pval<-ifelse(zscore > 0, 1 - pnorm(zscore), pnorm(zscore))  #Calculating the p-value
zscore
pval
NNI <- MeanObsDist / MeanExpDist
NNI
spatialEco::nni(farmers_points,win="hull")
spatialEco::nni(farmers_market$geometry,win="hull")
class(farmers_market$geometry)
spatialEco::nni(farmers_market,win="hull")
spatialEco::nni(farmers_market %>% distinct(),win="hull")
farmers_distinct <- farmers_market %>% distinct()
spatialEco::nni(farmers_distinct,win="hull")
farmers_market %>% distinct()
farmers_market %>% distinct(geometry)
farmers_distinct <- farmers_market %>% distinct(geometry)
spatialEco::nni(farmers_distinct,win="hull")
nnd <- nndist.ppp(FM_ppp)
#Average Observed Distance
MeanObsDist <- mean(nnd)
#Average Expected Distance
MeanExpDist <- 0.5 / sqrt(nrow(farmers_points) / philly_bound)
area.owin(philly_bound)
View(FM_ppp)
ax(proxy::dist(data.frame(cbind(x=farmers_points$X, y=farmers_points$Y)),
data.frame(cbind(x=farmers_points$X, y=farmers_points$Y)),
method="euclidean")
max(proxy::dist(data.frame(cbind(x=farmers_points$X, y=farmers_points$Y)),
max(proxy::dist(data.frame(cbind(x=farmers_points$X, y=farmers_points$Y)),
data.frame(cbind(x=farmers_points$X, y=farmers_points$Y)),
method="euclidean"))
```{r kFunction}
# find max distance between points
max.distance <- max(proxy::dist(data.frame(cbind(x=farmers_points$X, y=farmers_points$Y)),
data.frame(cbind(x=farmers_points$X, y=farmers_points$Y)),
method="euclidean"))
# max.distance  # 56698.31
# approximate 56,698.31 to be about 57,000 and dived that by 2 to get rmax
rmax <- 57000 / 2 # 28500
# define khat
khat <-Kest(FM_ppp,
rmax = rmax,
correction = "Ripley")
# calculate Ripley's Simulation Confidence Envelopes
Kenv <- spatstat.explore::envelope(FM_ppp,
fun = "Kest",
rmax = rmax,
nsim = 99,
nrank = 1)
# plot Ripley's K-function with Edge correction
plot(khat$r, khat$iso,
xlab = "r", ylab = "Ripley's K",
main = "Ripley's Estimated K-Function",
cex.lab = 1.6, cex.axis = 1.5, cex.main = 1.5,
lty = 1, lwd = 2)
lines(khat$r, khat$theo,
lty = 8, lwd = 2)
# plot Ripley's K-function with 90% simulation envelopes
plot(Kenv,
xlab = "r", ylab = "Khat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "Ripley's Khat with Confidence Envelopes",
cex.main = 1.5, lwd = 2)
# plot Ripley's L-function
plot(lhat$r, lhat$iso - lhat$r,
xlab = "r", ylab = "Ripley's L",
cex.lab = 1.6, cex.axis = 1.5, cex.main = 1.5,
lty = 1, lwd = 2,
main="Ripley's Estimated L-Function")
# L Function
lhat <- Lest(FM_ppp,
rmax = rmax,
correction = "Ripley")
# L Function with 90% envelopes
Lenv <- spatstat.explore::envelope(FM_ppp,
fun = "Lest",
rmax = rmax,
nsim = 99,
nrank = 1)
# plot Ripley's L-function
plot(lhat$r, lhat$iso - lhat$r,
xlab = "r", ylab = "Ripley's L",
cex.lab = 1.6, cex.axis = 1.5, cex.main = 1.5,
lty = 1, lwd = 2,
main="Ripley's Estimated L-Function")
lines(lhat$r, lhat$theo - lhat$r,
lty = 8, lwd = 2)
# plot Ripley's L-function with 90% simulation envelopes
plot(Lenv,
xlab = "r", ylab = "Lhat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "Ripley's L-function with Confidence Envelopes",
cex.main = 1.5, lwd = 2)
L2 <- Lenv
L2$obs <- L2$obs-L2$r
L2$theo <- L2$theo-L2$r
L2$lo <- L2$lo-L2$r
L2$hi <- L2$hi-L2$r
plot(L2,
xlab = "r", ylab = "Lhat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "Ripley's L-function with Confidence Envelopes",
cex.main = 1.5, lwd = 2, legend = F)
setwd("~/Documents/GitHub/MUSA5000_Stats/hw04")
knitr::opts_chunk$set(echo = T, eval = T, warning = F, message = F)
# get rid of scientific notation
options(scipen = 999)
# set working directory
# setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/MUSA/Fall24/MUSA5000_Stats/MUSA5000_Stats/hw04")
# setwd("~/Documents/GitHub/MUSA5000_Stats/hw04")
# load packages
library(tidyverse)
library(sf)
library(spatstat)
library(ggplot2)
library(proxy)
library(rnaturalearth)
farmers_market <- st_read("HW 4/Philadelphia_Farmers_Markets201302.shp", quiet = T)
philly_zips <- st_read("HW 4/Philadelphia_ZipCodes.shp", quiet = T)
philly <- st_read("HW 4/Philadelphia.shp", quiet = T)
# load hydro data for philly
# source: https://opendataphilly.org/datasets/hydrology/
hydro <- st_read("https://services.arcgis.com/fLeGjb7u4uXqeF9q/arcgis/rest/services/Hydrographic_Features_Poly/FeatureServer/1/query?outFields=*&where=1%3D1&f=geojson", quiet = T) %>%
st_transform(crs = st_crs(farmers_market))
# create map
ggplot() +
# philly data
geom_sf(data = philly, fill = "transparent", color = "lightgrey", lwd = 2) +
# philly_zips data
geom_sf(data = philly_zips, fill = "darkgrey", color = "lightgrey", lwd = 0.5) +
# farmers market data
geom_sf(data = farmers_market) +
# hydro data
geom_sf(data = hydro, fill = "#96dbe3", color = "transparent") +
# map limits
coord_sf(xlim = c(2660000, 2749276),
ylim = c(208915, 310000)) +
labs(title = "Philadelphia Farmers Market Locations") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "#555555"))
# get coords for farmers markets
FM_pts <- data.frame(farmers_market %>%
st_coordinates())
# got a warning about duplicated points, and figured out that row 25 and 41 are duplicates
# checked the farmer_market data and they are in fact both at RTM
# removing the second point to have all unique points
FM_pts_nodup <- FM_pts[-41,]
# boundary
philly_bound <- as.owin(philly)
# define ppp object
FM_ppp <- ppp(FM_pts_nodup$X, FM_pts_nodup$Y, window = philly_bound)
# Computes the distance from each point to its nearest neighbor in a point pattern.
nnd <- nndist.ppp(FM_ppp)
# calculate Mean Observed Distance, Mean Expected Distance and SE.
MeanObsDist <- mean(nnd)
MeanExpDist <- 0.5 / sqrt(nrow(farmers_market) / area.owin(philly_bound))
SE <- 0.26136 / sqrt(nrow(farmers_market)^2 / area.owin(philly_bound))
# calculate z-statistic
zscore <- (MeanObsDist - MeanExpDist)/SE                     # z = -3.106
pval <- ifelse(zscore > 0, 1 - pnorm(zscore), pnorm(zscore)) # p = 0.0009
# calculating the NNI
NNI <- MeanObsDist / MeanExpDist    # NNI = 0.794
spatialEco::nni(farmers_market[-41,], win = "hull")
# prof did this with the base plot functions
plot(density(FM_ppp),
main = "Kernel Density Plot of Farmers Markets in Philadelphia")
contour(density(FM_ppp), add = T)
plot(FM_ppp, add = T)
# find max distance between points
max.distance <- max(proxy::dist(data.frame(cbind(x=FM_pts_nodup$X, y=FM_pts_nodup$Y)),
data.frame(cbind(x=FM_pts_nodup$X, y=FM_pts_nodup$Y)),
method="euclidean"))
# max.distance  # 56698.31
# approximate 56,698.31 to be about 57,000 and dived that by 2 to get rmax
rmax <- 57000 / 2 # 28500
# define khat
khat <-Kest(FM_ppp,
rmax = rmax,
correction = "Ripley")
# calculate Ripley's Simulation Confidence Envelopes
Kenv <- spatstat.explore::envelope(FM_ppp,
fun = "Kest",
rmax = rmax,
nsim = 99,
nrank = 1)
# plot Ripley's K-function with 90% simulation envelopes
plot(Kenv,
xlab = "r", ylab = "Khat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "Ripley's K-Function with Confidence Envelopes",
cex.main = 1.5, lwd = 2)
# L Function
lhat <- Lest(FM_ppp,
rmax = rmax,
correction = "Ripley")
# L Function with 90% envelopes
Lenv <- spatstat.explore::envelope(FM_ppp,
fun = "Lest",
rmax = rmax,
nsim = 99,
nrank = 1)
L2 <- Lenv
L2$obs <- L2$obs-L2$r
L2$theo <- L2$theo-L2$r
L2$lo <- L2$lo-L2$r
L2$hi <- L2$hi-L2$r
plot(L2,
xlab = "r", ylab = "Lhat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "Ripley's L-function with Confidence Envelopes",
cex.main = 1.5, lwd = 2)
# create map
ggplot() +
# philly data
geom_sf(data = philly, fill = "transparent", color = "lightgrey", lwd = 2) +
# philly_zips data
geom_sf(data = philly_zips, aes(fill = MedIncome), color = "lightgrey", lwd = 0.5) +
# farmers market data
geom_sf(data = farmers_market) +
# hydro data
geom_sf(data = hydro, fill = "#96dbe3", color = "transparent") +
# map limits
coord_sf(xlim = c(2660000, 2749276),
ylim = c(208915, 310000)) +
# change themes
scale_fill_gradient(low = "#742C14FF",
high = "#F0D77BFF",
breaks = c(0, 15000, 30000, 45000, 60000),
limits = c(0,60000),
labels = c("$0", "$15k", "$30k", "$45k", "$60k")) +
labs(title = "Philadelphia Farmers Market Locations and Median HH Income by ZIP code",
fill = "Med. HH Inc.") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "#555555"),
legend.position = c(.95, .05),
legend.justification = c("right", "bottom"),
legend.margin = margin(3, 3, 3, 3))
# plot Ripley's K-function with Edge correction
plot(khat$r, khat$iso,
xlab = "r", ylab = "best k",
main = "Machine Best Estimated K-Function",
cex.lab = 1.6, cex.axis = 1.5, cex.main = 1.5,
lty = 1, lwd = 2)
lines(khat$r, khat$theo,
lty = 8, lwd = 2)
# plot Ripley's K-function with 90% simulation envelopes
plot(Kenv,
xlab = "r", ylab = "Khat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "Machine Best with Confidence Envelopes",
cex.main = 1.5, lwd = 2)
# L Function
lhat <- Lest(FM_ppp,
rmax = rmax,
correction = "best")
# L Function with 90% envelopes
Lenv <- spatstat.explore::envelope(FM_ppp,
fun = "Lest",
rmax = rmax,
nsim = 99,
nrank = 1)
# plot Ripley's L-function
plot(lhat$r, lhat$iso - lhat$r,
xlab = "r", ylab = "best L",
cex.lab = 1.6, cex.axis = 1.5, cex.main = 1.5,
lty = 1, lwd = 2,
main="best Estimated L-Function")
lines(lhat$r, lhat$theo - lhat$r,
lty = 8, lwd = 2)
# plot Ripley's L-function with 90% simulation envelopes
plot(Lenv,
xlab = "r", ylab = "Lhat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "best L-function with Confidence Envelopes",
cex.main = 1.5, lwd = 2)
L2 <- Lenv
L2$obs <- L2$obs-L2$r
L2$theo <- L2$theo-L2$r
L2$lo <- L2$lo-L2$r
L2$hi <- L2$hi-L2$r
plot(L2,
xlab = "r", ylab = "Lhat(r)",
cex.lab = 1.6, cex.axis = 1.5,
main = "best L-function with Confidence Envelopes",
cex.main = 1.5, lwd = 2, legend = F)
